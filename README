# Boost::Spirit + LLVM = WIN !

## This project contains examples on how to build interpreters and compilers with the Spirit parser library and the LLVM backend.

This is a work in progress, with for now, only the first examples as self-contained c++ programs (hence the dupplication). After launching the programs, you have to feed the "code" on standard input
(Ctrl-d to end input when interactive).

* lang-1 only contains artihmetic expressions. The result with the real LLVM IRBuilder is not impressive because it does constant folding :)
So if you type :
1+3*(4-2)

it will output:
parsing succeded !
; ModuleID = 'lang_1'

define i32 @main() {
entry:
  ret i32 7
}

and then exec the code to print the result:
result: 7

For illustrative purposes, you should hack IRBuilder to remove the constant folding.

lang-2 adds variables (var a; var b=...;) and statements must end with a ';'
the program must end with a return statement (return ... ;)

lang-3 adds if{} [else{}] and while(){} control structures and ternary operators.

To be continued ...

# TODO: 
* and then make an llvm-backed calc7
* handle scopes with symbols_stack
* handle function definitions
